1. deploy cdk project
  creates VPC and endpoints

-------------------------------------------------------
2. create eks cluster
  
  eksctl create cluster -f config-alb.yaml

  set the vpc.security group to cdk sg
    - allows communication between nodes/control plane

  creates the prerequisite add-ons for alb
    - vpc-cni
    - coredns
    - kube-proxy

  creates the following service accounts and iam roles
    - aws-load-balancer-controller
    - efs-csi-controller-sa
    - external-dns

-------------------------------------------------------
3. install aws load balancer controller

https://docs.aws.amazon.com/eks/latest/userguide/aws-load-balancer-controller.html

### steps

helm repo add eks https://aws.github.io/eks-charts

kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master"

helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller \
  -n kube-system \
  --set clusterName=test \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller \
  --set image.repository=602401143452.dkr.ecr.us-east-1.amazonaws.com/amazon/aws-load-balancer-controller

### test

kubectl get deployment -n kube-system aws-load-balancer-controller

-------------------------------------------------------
4. dns/tls

http://www.thedreaming.org/2021/10/21/kubernetes-for-developers-part-2/

### steps

create vpc with public subnet to pull img from public ecr and push to private ecr
- image:  k8s.gcr.io/external-dns/external-dns:v0.11.0

helm repo add bitnami https://charts.bitnami.com/bitnami

helm upgrade -i external-dns bitnami/external-dns \
  -n kube-system \
  --set provider=aws \
  --set aws.zoneType=private \
  --set serviceAccount.create=false \
  --set serviceAccount.name=external-dns \
  --set txtOwnerId=<hosted zone id> \
  --set "domainFilters[0]"=sparx.com \
  --set image.registry=844540003076.dkr.ecr.us-east-1.amazonaws.com \
  --set image.repository=external-dns \
  --set image.tag=v0.11.0


  --dry-run

### test

kubectl get deployment -n kube-system external-dns

kubectl --namespace=kube-system get pods -l "app.kubernetes.io/name=external-dns,app.kubernetes.io/instance=external-dns"

-------------------------------------------------------
5. deploy 2048 game

https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html#application-load-balancer-sample-application

### steps for private subnet

curl -o 2048_full.yaml https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.4/docs/examples/2048/2048_full.yaml

change alb.ingress.kubernetes.io/scheme from internet-facing to internal

create vpc with public subnet to pull img from public ecr and push to private ecr
- image:  public.ecr.aws/l6m2t8p7/docker-2048

update 2048_full.yaml to pull image from private ecr

kubectl apply -f 2048_full_ecr.yml

### test

kubectl get ingress/ingress-2048 -n game-2048

session manager:

add default cdk vpc sg to lb

curl <lb dns>:80/


-------------------------------------------------------
cleanup

kubectl delete -f 2048_full_ecr.yml
helm uninstall -n kube-system external-dns
helm uninstall -n kube-system aws-load-balancer-controller
eksctl delete cluster -f config-alb.yaml